{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"File System IO","text":"Badges License PyPI Version Build Status Main <p>File System IO or simply FSIO is a Python package containing useful file system operations.</p> <p>Table of contents</p> <ul> <li>Installation</li> <li>Getting Started</li> <li>CLI</li> <li>Development</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Installing the main package is as simple as downloading from PyPI.</p> <pre><code>pip install 'fsio==$VERSION'\n</code></pre> <p>If you also require use of the CLI, then you can install with extras as follows.</p> <pre><code>pip install 'fsio[cli]==$VERSION'\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>This package was designed for simplifying some file system operations. Its original design was for detecting file types of a file, but it has been expanded beyond this. The main code lives within the core directory. Here, for example, you will see the file_type class which supports the <code>detect-file-type</code> commands within the CLI. Moreover, we can use this within Python code provided we have the object in BytesIO form. For example, suppose we have a <code>.parquet</code> file without an extension and we want to establish its type, and confirm that it really is of type parquet. To do this, we could do something as follows.</p> <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt;\n&gt;&gt;&gt; from fsio.core import FileType\n&gt;&gt;&gt;\n&gt;&gt;&gt; path_to_file = Path('path/to/suspected/parquet')\n&gt;&gt;&gt;\n&gt;&gt;&gt; with path_to_file.open('rb') as f:\n&gt;&gt;&gt;     body = BytesIO(f.read())\n&gt;&gt;&gt;\n&gt;&gt;&gt; FileType.detect_file_type(body)\n'parquet'\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>If you optionally installed the <code>cli</code> subpackage, then you get extra functionality and are able to use most of the functionality from the <code>core</code> package. For example, you can detect the file type of a given file using the command</p> <pre><code>fsio detect-file-type path/to/file.ext\n</code></pre> <p>This will return the type of the file to the stdout, for example <code>parquet</code>. You can get more information about each command by using the <code>--help</code> flag on each command. The CLI was designed using typer, from the creators of FastAPI. A list of the following CLI commands which are available are below.</p> Commands <code>fsio detect-file-type FILE</code> Detect the type of <code>FILE</code> given as input <code>fsio supported-types</code> List the current supportoed file types"},{"location":"#development","title":"Development","text":"<p>To contribute to this project, you can clone the repository and install the development dependencies. This can be done using <code>uv sync --all-extras</code> (which uses the uv.lock file for consistency). There is a <code>pre-commit</code> hook which will run on each commit to ensure that the code is formatted correctly. To install this, we need to run</p> <pre><code>uv sync --extra test\n</code></pre> <p>to install <code>pre-commit</code> and then run <code>pre-commit install</code> in terminal. We can manually run the <code>pre-commit</code> hooks using the command</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"#branching","title":"Branching","text":"<p>When creating a new branch, please use one of the following:</p> <ul> <li><code>feature/*</code> for new features (branch from and PR to <code>develop</code>);</li> <li><code>bugfix/*</code> for bug fixes (non-critical) (branch from and PR to <code>develop</code>);</li> <li><code>hotfix/*</code> for hotfixes (branch from and PR to <code>main</code>, syncing to <code>develop</code>); and</li> <li><code>release/*</code> for releases (branch from <code>develop</code> with PR to <code>main</code>, syncing to <code>develop</code>).</li> </ul> <p>The <code>main</code> branch is the stable deployment, and <code>release</code> branches are used for preparing a new release.</p>"},{"location":"code/cli/api/","title":"CLI","text":""},{"location":"code/cli/api/#src.fsio.cli.program.detect_file_type","title":"<code>detect_file_type(file)</code>","text":"<p>Function to detect the file type of the provided file location.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>The Path to the file we want to determine the type for.</p> required <p>Examples:</p> <pre><code>$ fsio detect-file-type path/to/file\nparquet\n</code></pre> Source code in <code>src/fsio/cli/program.py</code> <pre><code>@app.command(\n    help=\"Command to determine the file type of the provided file.\",  # CLI help\n)\ndef detect_file_type(\n    file: Path,\n) -&gt; None:\n    \"\"\"Function to detect the _file type_ of the provided file location.\n\n    Args:\n        file: The **Path** to the file we want to determine the _type_ for.\n\n    Examples:\n        ```shell\n        $ fsio detect-file-type path/to/file\n        parquet\n        ```\n    \"\"\"\n    if not file.exists():\n        typer.echo(f\"[ERROR] File not found: {file}\")\n        raise typer.Exit(code=1)\n\n    with file.open(\"rb\") as f:\n        body = BytesIO(f.read())\n        body.seek(0)\n\n    file_type = FileType.detect_file_type(body)\n    if file_type:\n        typer.secho(file_type, fg=typer.colors.GREEN)\n        raise typer.Exit(code=0)\n\n    typer.secho(\"File type could not be detected\", fg=typer.colors.RED)\n</code></pre>"},{"location":"code/cli/api/#src.fsio.cli.program.supported_types","title":"<code>supported_types()</code>","text":"<p>Function to return all supported file types that can be detected.</p> <p>Examples:</p> <pre><code>$ fsio supported-types\ncsv\nparquet\n</code></pre> Source code in <code>src/fsio/cli/program.py</code> <pre><code>@app.command(\n    help=\"Command to return the current supported file types for detection.\",  # CLI help\n)\ndef supported_types() -&gt; None:\n    \"\"\"Function to return all supported file types that can be detected.\n\n    Examples:\n        ```shell\n        $ fsio supported-types\n        csv\n        parquet\n        ```\n    \"\"\"\n    for file_type in FileType.supported_types():\n        typer.secho(file_type)\n</code></pre>"},{"location":"code/core/api/","title":"File Types","text":""},{"location":"code/core/api/#src.fsio.core.file_type.FileType","title":"<code>FileType</code>","text":"<p>Class to determine the file type of an object in BytesIO form.</p> <p>This is based on the file signatures / magic numbers as defined here.</p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>class FileType:\n    \"\"\"Class to determine the file type of an object in **BytesIO** form.\n\n    This is based on the _file signatures_ / _magic numbers_ as defined [here](https://en.wikipedia.org/wiki/List_of_file_signatures).\n    \"\"\"\n\n    @classmethod\n    def supported_types(\n        cls,\n    ) -&gt; list[str]:\n        \"\"\"Function to return the current supported types for _file detection_.\n        This is determined from the current `@classmethod` objects of the form `is_&lt;type&gt;`.\n\n        Returns:\n            A **list** of **str** objects containing the supported types.\n\n        Examples:\n            &gt;&gt;&gt; FileType.supported_types()\n            ['avro', 'bz2', 'gz', 'orc', 'parquet', 'xlsx', 'xml', 'zip']\n        \"\"\"\n        return sorted(\n            attr.lstrip(\"is_\")\n            for attr in dir(cls)\n            if isinstance(inspect.getattr_static(cls, attr), classmethod) and attr.startswith(\"is_\")\n        )\n\n    @classmethod\n    def get_detection_methods(\n        cls,\n    ) -&gt; list[MethodType]:\n        \"\"\"Function to return the current supported _file detection_ methods.\n\n        Returns:\n            A **list** of `@classmethod` detection methods.\n\n        Examples:\n            &gt;&gt;&gt; FileType.get_detection_methods()\n        \"\"\"\n        return [getattr(cls, f\"is_{s_type}\") for s_type in cls.supported_types()]\n\n    @classmethod\n    def get_head_n_bytes(\n        cls,\n        body: BytesIO,\n        n: int,\n    ) -&gt; bytes:\n        \"\"\"Function to return the first `n` bytes from the **BytesIO** object.\n\n        Args:\n            body: The **BytesIO** object to extract the bytes from.\n            n: The number of **bytes** to return.\n\n        Returns:\n            A `bytes` object containing the first `n` bytes of the data.\n\n        Examples:\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.get_head_n_bytes(BytesIO(b'Hello World!'), 5)\n            b'Hello'\n        \"\"\"\n        body.seek(0)\n        return body.read(n)\n\n    @classmethod\n    def get_tail_n_bytes(\n        cls,\n        body: BytesIO,\n        n: int,\n    ) -&gt; bytes:\n        \"\"\"Function to return the last `n` bytes from the **BytesIO** object.\n\n        Args:\n            body: The **BytesIO** object to extract the bytes from.\n            n: The number of **bytes** to return.\n\n        Returns:\n            A **bytes** object containing the last `n` bytes of the data.\n\n        Examples:\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.get_tail_n_bytes(BytesIO(b'Hello World!'), 6)\n            b'World!'\n        \"\"\"\n        body.seek(-n, 2)\n        return body.read(n)\n\n    @classmethod\n    def is_xml(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **XML** type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **XML** type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_xml(BytesIO(b'&lt;?xml\\x20\\x63\\x68\\x61\\x7aPAR1'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; import xml.etree.ElementTree as ET\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; root = ET.Element('data')\n                &gt;&gt;&gt; tree = ET.ElementTree(root)\n                &gt;&gt;&gt; tree.write(body, encoding='utf-8', xml_declaration=True)\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; FileType.is_xml(body)\n                True\n                ```\n        \"\"\"\n        head6 = cls.get_head_n_bytes(body, 6)\n        logger.debug(\"HEAD(6): %r\", head6)\n        return head6 == b\"&lt;?xml\\x20\"\n\n    @classmethod\n    def is_parquet(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **PARQUET** type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **PARQUET** type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_parquet(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; import pandas as pd\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; df = pd.DataFrame()\n                &gt;&gt;&gt; df.to_parquet(body)\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; FileType.is_parquet(body)\n                True\n                ```\n        \"\"\"\n        head4 = cls.get_head_n_bytes(body, 4)\n        tail4 = cls.get_tail_n_bytes(body, 4)\n        logger.debug(\"HEAD(4): %r\", head4)\n        logger.debug(\"TAIL(4): %r\", tail4)\n        return all(i == b\"PAR1\" for i in [head4, tail4])\n\n    @classmethod\n    def is_avro(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **AVRO** type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **AVRO** type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_avro(BytesIO(b'Obj\\x01\\x63\\x68\\x61\\x7a'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; import pandas as pd\n                &gt;&gt;&gt; from fastavro import writer\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; df = pd.DataFrame(columns=[\"age\"], data=[[18]])\n                &gt;&gt;&gt; schema = {\"type\": \"record\", \"name\": \"ages\", \"fields\": [{\"name\": \"age\", \"type\": \"int\"}]}\n                &gt;&gt;&gt; writer(body, schema, df.to_dict(orient=\"records\"))\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; FileType.is_avro(body)\n                True\n                ```\n        \"\"\"\n        head4 = cls.get_head_n_bytes(body, 4)\n        logger.debug(\"HEAD(4): %r\", head4)\n        return head4 == b\"Obj\\x01\"\n\n    @classmethod\n    def is_orc(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **ORC** type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **ORC** type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_orc(BytesIO(b'ORC\\x63\\x68\\x61\\x7a'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; import pandas as pd\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; df = pd.DataFrame()\n                &gt;&gt;&gt; df.to_orc(body)\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; FileType.is_orc(body)\n                True\n                ```\n        \"\"\"\n        head3 = cls.get_head_n_bytes(body, 3)\n        logger.debug(\"HEAD(3): %r\", head3)\n        return head3 == b\"ORC\"\n\n    @classmethod\n    def is_bz2(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **BZ2** compression type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **BZ2** compression type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_bz2(BytesIO(b'BZh\\x63\\x68\\x61\\x7a'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; import bz2\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; with bz2.BZ2File(body, 'wb') as f:\n                &gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt; FileType.is_bz2(body)\n                True\n                ```\n        \"\"\"\n        head3 = cls.get_head_n_bytes(body, 3)\n        logger.debug(\"HEAD(3): %r\", head3)\n        return head3 == b\"BZh\"\n\n    @classmethod\n    def is_gz(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **GZIP** compression type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **GZIP** compression type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_gz(BytesIO(b'\\x1f\\x8b\\x63\\x68\\x61\\x7a'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; import gzip\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; with gzip.GzipFile(fileobj=body, mode=\"wb\") as f:\n                &gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt; FileType.is_gz(body)\n                True\n                ```\n        \"\"\"\n        head2 = cls.get_head_n_bytes(body, 2)\n        logger.debug(\"HEAD(2): %r\", head2)\n        return head2 == b\"\\x1f\\x8b\"\n\n    @classmethod\n    def is_zip(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        r\"\"\"Function to determine if the provided **BytesIO** object is of **ZIP** compression type or not.\n        Note that this also includes types such as `.docx` and `.xlsx`.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **ZIP** compression type or `False` if not.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.is_zip(BytesIO(b'PK\\x03\\x04\\x63\\x68\\x61\\x7a'))\n                True\n                ```\n\n            Explicit example\n                ```python\n                &gt;&gt;&gt; import zipfile\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body = BytesIO()\n                &gt;&gt;&gt; with zipfile.ZipFile(body, 'w') as zip:\n                &gt;&gt;&gt;     zip.writestr('file.ext', b'\\x63\\x68\\x61\\x7a')\n                &gt;&gt;&gt;\n                &gt;&gt;&gt; body.seek(0)\n                &gt;&gt;&gt; FileType.is_zip(body)\n                True\n                ```\n        \"\"\"\n        head4 = cls.get_head_n_bytes(body, 4)\n        logger.debug(\"HEAD(4): %r\", head4)\n        return any(head4 == i for i in [b\"PK\\x03\\x04\", b\"PK\\x05\\x06\", b\"PK\\x08\\x08\"])\n\n    @classmethod\n    def is_xlsx(\n        cls,\n        body: BytesIO,\n    ) -&gt; bool:\n        \"\"\"Function to determine if the provided **BytesIO** object is of **XLSX** type or not.\n\n        Args:\n            body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n        Returns:\n            A boolean `True` if the file is of **XLSX** type or `False` if not.\n\n        Examples:\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; excel_path = Path('path/to/excel.xlsx')\n            &gt;&gt;&gt; with excel_path.open('rb') as f:\n            &gt;&gt;&gt;     body.write(f.read())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt; FileType.is_xlsx(body)\n            True\n        \"\"\"\n        if cls.is_zip(body):\n            logger.info(\"Body is of ZIP type\")\n            # https://en.wikipedia.org/wiki/Office_Open_XML#Standardization_process\n            required_files = {\n                \"[Content_Types].xml\",\n                \"_rels/.rels\",\n                \"xl/workbook.xml\",\n                \"xl/_rels/workbook.xml.rels\",\n                \"xl/worksheets/sheet1.xml\",\n            }\n            with zipfile.ZipFile(body, \"r\") as zip_file:\n                file_contents = set(zip_file.namelist())\n                logger.debug(\"ZIP file contents: %s\", file_contents)\n                if required_files.issubset(file_contents):\n                    return True\n\n        return False\n\n    @classmethod\n    def detect_file_type(\n        cls,\n        body: BytesIO,\n    ) -&gt; str | None:\n        r\"\"\"Function to detect the _file type_ of the provided **BytesIO** object.\n\n        Args:\n            body: The **BytesIO** object to determine the _file type_ of.\n\n        Returns:\n            A **str** containing the name of the _file type_.\n\n        Examples:\n            Basic usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\n                'parquet'\n                ```\n\n            Unsupported type usage\n                ```python\n                &gt;&gt;&gt; from io import BytesIO\n                &gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'\\x63\\x68\\x61\\x7a'))\n                None\n                ```\n        \"\"\"\n        for method in cls.get_detection_methods():\n            logger.debug(\"Checking %s(body)\", method.__name__)\n            if method(body=body):\n                return method.__name__.lstrip(\"is_\")\n\n        supported_types = cls.supported_types()\n        logger.info(\"Body is not of any of the supported types: %s\", supported_types)\n        return None\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.detect_file_type","title":"<code>detect_file_type(body)</code>  <code>classmethod</code>","text":"<p>Function to detect the file type of the provided BytesIO object.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>The BytesIO object to determine the file type of.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>A str containing the name of the file type.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\n'parquet'\n</code></pre></p> <p>Unsupported type usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'\\x63\\x68\\x61\\x7a'))\nNone\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef detect_file_type(\n    cls,\n    body: BytesIO,\n) -&gt; str | None:\n    r\"\"\"Function to detect the _file type_ of the provided **BytesIO** object.\n\n    Args:\n        body: The **BytesIO** object to determine the _file type_ of.\n\n    Returns:\n        A **str** containing the name of the _file type_.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\n            'parquet'\n            ```\n\n        Unsupported type usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.detect_file_type(BytesIO(b'\\x63\\x68\\x61\\x7a'))\n            None\n            ```\n    \"\"\"\n    for method in cls.get_detection_methods():\n        logger.debug(\"Checking %s(body)\", method.__name__)\n        if method(body=body):\n            return method.__name__.lstrip(\"is_\")\n\n    supported_types = cls.supported_types()\n    logger.info(\"Body is not of any of the supported types: %s\", supported_types)\n    return None\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.get_detection_methods","title":"<code>get_detection_methods()</code>  <code>classmethod</code>","text":"<p>Function to return the current supported file detection methods.</p> <p>Returns:</p> Type Description <code>list[MethodType]</code> <p>A list of <code>@classmethod</code> detection methods.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FileType.get_detection_methods()\n</code></pre> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef get_detection_methods(\n    cls,\n) -&gt; list[MethodType]:\n    \"\"\"Function to return the current supported _file detection_ methods.\n\n    Returns:\n        A **list** of `@classmethod` detection methods.\n\n    Examples:\n        &gt;&gt;&gt; FileType.get_detection_methods()\n    \"\"\"\n    return [getattr(cls, f\"is_{s_type}\") for s_type in cls.supported_types()]\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.get_head_n_bytes","title":"<code>get_head_n_bytes(body, n)</code>  <code>classmethod</code>","text":"<p>Function to return the first <code>n</code> bytes from the BytesIO object.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>The BytesIO object to extract the bytes from.</p> required <code>n</code> <code>int</code> <p>The number of bytes to return.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>A <code>bytes</code> object containing the first <code>n</code> bytes of the data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.get_head_n_bytes(BytesIO(b'Hello World!'), 5)\nb'Hello'\n</code></pre> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef get_head_n_bytes(\n    cls,\n    body: BytesIO,\n    n: int,\n) -&gt; bytes:\n    \"\"\"Function to return the first `n` bytes from the **BytesIO** object.\n\n    Args:\n        body: The **BytesIO** object to extract the bytes from.\n        n: The number of **bytes** to return.\n\n    Returns:\n        A `bytes` object containing the first `n` bytes of the data.\n\n    Examples:\n        &gt;&gt;&gt; from io import BytesIO\n        &gt;&gt;&gt; FileType.get_head_n_bytes(BytesIO(b'Hello World!'), 5)\n        b'Hello'\n    \"\"\"\n    body.seek(0)\n    return body.read(n)\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.get_tail_n_bytes","title":"<code>get_tail_n_bytes(body, n)</code>  <code>classmethod</code>","text":"<p>Function to return the last <code>n</code> bytes from the BytesIO object.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>The BytesIO object to extract the bytes from.</p> required <code>n</code> <code>int</code> <p>The number of bytes to return.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>A bytes object containing the last <code>n</code> bytes of the data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.get_tail_n_bytes(BytesIO(b'Hello World!'), 6)\nb'World!'\n</code></pre> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef get_tail_n_bytes(\n    cls,\n    body: BytesIO,\n    n: int,\n) -&gt; bytes:\n    \"\"\"Function to return the last `n` bytes from the **BytesIO** object.\n\n    Args:\n        body: The **BytesIO** object to extract the bytes from.\n        n: The number of **bytes** to return.\n\n    Returns:\n        A **bytes** object containing the last `n` bytes of the data.\n\n    Examples:\n        &gt;&gt;&gt; from io import BytesIO\n        &gt;&gt;&gt; FileType.get_tail_n_bytes(BytesIO(b'Hello World!'), 6)\n        b'World!'\n    \"\"\"\n    body.seek(-n, 2)\n    return body.read(n)\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_avro","title":"<code>is_avro(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of AVRO type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of AVRO type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_avro(BytesIO(b'Obj\\x01\\x63\\x68\\x61\\x7a'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from fastavro import writer\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; df = pd.DataFrame(columns=[\"age\"], data=[[18]])\n&gt;&gt;&gt; schema = {\"type\": \"record\", \"name\": \"ages\", \"fields\": [{\"name\": \"age\", \"type\": \"int\"}]}\n&gt;&gt;&gt; writer(body, schema, df.to_dict(orient=\"records\"))\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt;\n&gt;&gt;&gt; FileType.is_avro(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_avro(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **AVRO** type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **AVRO** type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_avro(BytesIO(b'Obj\\x01\\x63\\x68\\x61\\x7a'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; import pandas as pd\n            &gt;&gt;&gt; from fastavro import writer\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; df = pd.DataFrame(columns=[\"age\"], data=[[18]])\n            &gt;&gt;&gt; schema = {\"type\": \"record\", \"name\": \"ages\", \"fields\": [{\"name\": \"age\", \"type\": \"int\"}]}\n            &gt;&gt;&gt; writer(body, schema, df.to_dict(orient=\"records\"))\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; FileType.is_avro(body)\n            True\n            ```\n    \"\"\"\n    head4 = cls.get_head_n_bytes(body, 4)\n    logger.debug(\"HEAD(4): %r\", head4)\n    return head4 == b\"Obj\\x01\"\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_bz2","title":"<code>is_bz2(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of BZ2 compression type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of BZ2 compression type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_bz2(BytesIO(b'BZh\\x63\\x68\\x61\\x7a'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; import bz2\n&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; with bz2.BZ2File(body, 'wb') as f:\n&gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n&gt;&gt;&gt;\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt; FileType.is_bz2(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_bz2(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **BZ2** compression type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **BZ2** compression type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_bz2(BytesIO(b'BZh\\x63\\x68\\x61\\x7a'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; import bz2\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; with bz2.BZ2File(body, 'wb') as f:\n            &gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt; FileType.is_bz2(body)\n            True\n            ```\n    \"\"\"\n    head3 = cls.get_head_n_bytes(body, 3)\n    logger.debug(\"HEAD(3): %r\", head3)\n    return head3 == b\"BZh\"\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_gz","title":"<code>is_gz(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of GZIP compression type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of GZIP compression type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_gz(BytesIO(b'\\x1f\\x8b\\x63\\x68\\x61\\x7a'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; import gzip\n&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; with gzip.GzipFile(fileobj=body, mode=\"wb\") as f:\n&gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n&gt;&gt;&gt;\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt; FileType.is_gz(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_gz(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **GZIP** compression type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **GZIP** compression type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_gz(BytesIO(b'\\x1f\\x8b\\x63\\x68\\x61\\x7a'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; import gzip\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; with gzip.GzipFile(fileobj=body, mode=\"wb\") as f:\n            &gt;&gt;&gt;     f.write(b'\\x63\\x68\\x61\\x7a')\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt; FileType.is_gz(body)\n            True\n            ```\n    \"\"\"\n    head2 = cls.get_head_n_bytes(body, 2)\n    logger.debug(\"HEAD(2): %r\", head2)\n    return head2 == b\"\\x1f\\x8b\"\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_orc","title":"<code>is_orc(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of ORC type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of ORC type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_orc(BytesIO(b'ORC\\x63\\x68\\x61\\x7a'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; df = pd.DataFrame()\n&gt;&gt;&gt; df.to_orc(body)\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt;\n&gt;&gt;&gt; FileType.is_orc(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_orc(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **ORC** type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **ORC** type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_orc(BytesIO(b'ORC\\x63\\x68\\x61\\x7a'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; import pandas as pd\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; df = pd.DataFrame()\n            &gt;&gt;&gt; df.to_orc(body)\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; FileType.is_orc(body)\n            True\n            ```\n    \"\"\"\n    head3 = cls.get_head_n_bytes(body, 3)\n    logger.debug(\"HEAD(3): %r\", head3)\n    return head3 == b\"ORC\"\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_parquet","title":"<code>is_parquet(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of PARQUET type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of PARQUET type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_parquet(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; df = pd.DataFrame()\n&gt;&gt;&gt; df.to_parquet(body)\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt;\n&gt;&gt;&gt; FileType.is_parquet(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_parquet(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **PARQUET** type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **PARQUET** type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_parquet(BytesIO(b'PAR1\\x63\\x68\\x61\\x7aPAR1'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; import pandas as pd\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; df = pd.DataFrame()\n            &gt;&gt;&gt; df.to_parquet(body)\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; FileType.is_parquet(body)\n            True\n            ```\n    \"\"\"\n    head4 = cls.get_head_n_bytes(body, 4)\n    tail4 = cls.get_tail_n_bytes(body, 4)\n    logger.debug(\"HEAD(4): %r\", head4)\n    logger.debug(\"TAIL(4): %r\", tail4)\n    return all(i == b\"PAR1\" for i in [head4, tail4])\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_xlsx","title":"<code>is_xlsx(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of XLSX type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of XLSX type or <code>False</code> if not.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; excel_path = Path('path/to/excel.xlsx')\n&gt;&gt;&gt; with excel_path.open('rb') as f:\n&gt;&gt;&gt;     body.write(f.read())\n&gt;&gt;&gt;\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt; FileType.is_xlsx(body)\nTrue\n</code></pre> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_xlsx(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    \"\"\"Function to determine if the provided **BytesIO** object is of **XLSX** type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **XLSX** type or `False` if not.\n\n    Examples:\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; from io import BytesIO\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; body = BytesIO()\n        &gt;&gt;&gt; excel_path = Path('path/to/excel.xlsx')\n        &gt;&gt;&gt; with excel_path.open('rb') as f:\n        &gt;&gt;&gt;     body.write(f.read())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; body.seek(0)\n        &gt;&gt;&gt; FileType.is_xlsx(body)\n        True\n    \"\"\"\n    if cls.is_zip(body):\n        logger.info(\"Body is of ZIP type\")\n        # https://en.wikipedia.org/wiki/Office_Open_XML#Standardization_process\n        required_files = {\n            \"[Content_Types].xml\",\n            \"_rels/.rels\",\n            \"xl/workbook.xml\",\n            \"xl/_rels/workbook.xml.rels\",\n            \"xl/worksheets/sheet1.xml\",\n        }\n        with zipfile.ZipFile(body, \"r\") as zip_file:\n            file_contents = set(zip_file.namelist())\n            logger.debug(\"ZIP file contents: %s\", file_contents)\n            if required_files.issubset(file_contents):\n                return True\n\n    return False\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_xml","title":"<code>is_xml(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of XML type or not.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of XML type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_xml(BytesIO(b'&lt;?xml\\x20\\x63\\x68\\x61\\x7aPAR1'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; import xml.etree.ElementTree as ET\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; root = ET.Element('data')\n&gt;&gt;&gt; tree = ET.ElementTree(root)\n&gt;&gt;&gt; tree.write(body, encoding='utf-8', xml_declaration=True)\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt;\n&gt;&gt;&gt; FileType.is_xml(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_xml(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **XML** type or not.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **XML** type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_xml(BytesIO(b'&lt;?xml\\x20\\x63\\x68\\x61\\x7aPAR1'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; import xml.etree.ElementTree as ET\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; root = ET.Element('data')\n            &gt;&gt;&gt; tree = ET.ElementTree(root)\n            &gt;&gt;&gt; tree.write(body, encoding='utf-8', xml_declaration=True)\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; FileType.is_xml(body)\n            True\n            ```\n    \"\"\"\n    head6 = cls.get_head_n_bytes(body, 6)\n    logger.debug(\"HEAD(6): %r\", head6)\n    return head6 == b\"&lt;?xml\\x20\"\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.is_zip","title":"<code>is_zip(body)</code>  <code>classmethod</code>","text":"<p>Function to determine if the provided BytesIO object is of ZIP compression type or not. Note that this also includes types such as <code>.docx</code> and <code>.xlsx</code>.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>BytesIO</code> <p>A BytesIO object containing the contents of the file to determine the type for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>A boolean <code>True</code> if the file is of ZIP compression type or <code>False</code> if not.</p> <p>Examples:</p> <p>Basic usage     <pre><code>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; FileType.is_zip(BytesIO(b'PK\\x03\\x04\\x63\\x68\\x61\\x7a'))\nTrue\n</code></pre></p> <p>Explicit example     <pre><code>&gt;&gt;&gt; import zipfile\n&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt;\n&gt;&gt;&gt; body = BytesIO()\n&gt;&gt;&gt; with zipfile.ZipFile(body, 'w') as zip:\n&gt;&gt;&gt;     zip.writestr('file.ext', b'\\x63\\x68\\x61\\x7a')\n&gt;&gt;&gt;\n&gt;&gt;&gt; body.seek(0)\n&gt;&gt;&gt; FileType.is_zip(body)\nTrue\n</code></pre></p> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef is_zip(\n    cls,\n    body: BytesIO,\n) -&gt; bool:\n    r\"\"\"Function to determine if the provided **BytesIO** object is of **ZIP** compression type or not.\n    Note that this also includes types such as `.docx` and `.xlsx`.\n\n    Args:\n        body: A **BytesIO** object containing the contents of the file to determine the type for.\n\n    Returns:\n        A boolean `True` if the file is of **ZIP** compression type or `False` if not.\n\n    Examples:\n        Basic usage\n            ```python\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt; FileType.is_zip(BytesIO(b'PK\\x03\\x04\\x63\\x68\\x61\\x7a'))\n            True\n            ```\n\n        Explicit example\n            ```python\n            &gt;&gt;&gt; import zipfile\n            &gt;&gt;&gt; from io import BytesIO\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body = BytesIO()\n            &gt;&gt;&gt; with zipfile.ZipFile(body, 'w') as zip:\n            &gt;&gt;&gt;     zip.writestr('file.ext', b'\\x63\\x68\\x61\\x7a')\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; body.seek(0)\n            &gt;&gt;&gt; FileType.is_zip(body)\n            True\n            ```\n    \"\"\"\n    head4 = cls.get_head_n_bytes(body, 4)\n    logger.debug(\"HEAD(4): %r\", head4)\n    return any(head4 == i for i in [b\"PK\\x03\\x04\", b\"PK\\x05\\x06\", b\"PK\\x08\\x08\"])\n</code></pre>"},{"location":"code/core/api/#src.fsio.core.file_type.FileType.supported_types","title":"<code>supported_types()</code>  <code>classmethod</code>","text":"<p>Function to return the current supported types for file detection. This is determined from the current <code>@classmethod</code> objects of the form <code>is_&lt;type&gt;</code>.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of str objects containing the supported types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; FileType.supported_types()\n['avro', 'bz2', 'gz', 'orc', 'parquet', 'xlsx', 'xml', 'zip']\n</code></pre> Source code in <code>src/fsio/core/file_type.py</code> <pre><code>@classmethod\ndef supported_types(\n    cls,\n) -&gt; list[str]:\n    \"\"\"Function to return the current supported types for _file detection_.\n    This is determined from the current `@classmethod` objects of the form `is_&lt;type&gt;`.\n\n    Returns:\n        A **list** of **str** objects containing the supported types.\n\n    Examples:\n        &gt;&gt;&gt; FileType.supported_types()\n        ['avro', 'bz2', 'gz', 'orc', 'parquet', 'xlsx', 'xml', 'zip']\n    \"\"\"\n    return sorted(\n        attr.lstrip(\"is_\")\n        for attr in dir(cls)\n        if isinstance(inspect.getattr_static(cls, attr), classmethod) and attr.startswith(\"is_\")\n    )\n</code></pre>"}]}